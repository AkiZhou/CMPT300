1) Briefly explain why this application would be difficult to write using multiple processes instead of threads.
    ANS: Processes don't share memory space so it will be difficult to have changes made on the sane string by multiple processes.

2) What is the significance of 'workperformed'?  How is it used?
    ANS: Workperformed stops threads from executing when a swap is happening, so the data doesn't corrupt.

3) Explain exactly what is the type of 'fp' in the following declaration: void *(*fp)(void *)
    ANS: fp is a function pointer pointing at a function that takes argument of type void * and returns pointer of type void *.


1) Why do we not detach any of the enzyme threads? Would the program function if we detached the sleeper thread?
    ANS: We do not detach the enzyme threads because if we do they will terminate after they are ran. Yes, the program will still function if we detach the sleeper thread.

2) Why does the program use sched_yield? What happens if this is not used? Will the swap counts always be identical?
    ANS: The program uses sched_yield to allow the other threads to run. Without it, the program still works and the swap count is not identical.

3) Threads are cancelled if the string contains a 'C' e.g. "Cherub". Why do we not include cancelled threads when adding up the total number of swaps?
    ANS: In order for a thread to be added to the total number of swaps, it needs to be run to completion. When we cancel threads, they are not run to completion thus they are not added to the swap count.

4) What happens when a thread tries to join itself? (You may need to create a test program to try this) Does it deadlock? Or does it generate an error?
    ANS: The thread enters a deadlock.

5) Briefly explain how the sleeper thread is implemented.
    ANS: The program creates a thread and passes it the sleeper function which calls the syscall sleep() with time five passed as the argument. If this thread completes before the other threads complete, the program will exit.

6) Briefly explain why PTHREAD_CANCEL_ASYNCHRONOUS is used in this MP.
    ANS: PTHREAD_CANCEL_ASYNCHRONOUS allows cancellation of a thread at any time, so as soon as we see 'C'.

7) Briefly explain the bug in Part II, #2 above.
    ANS: New memory was not being allocated for info inside of loop during each iteration, rather, it was only allocated once.

Q1: Two threads can be accessing the content of buffer and do their own manipulation to a segment of the buffer locally. The problem comes when they reflect the change to buffer, whichever writes later wipes the change made by the previous thread.

Q2:

Q3: Any part that gets influence by the content of buffer or can make change to buffer.

Q4:



